/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package br.com.retailsales.commons.avro;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class AvroProduct extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -3874117827523958122L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"AvroProduct\",\"namespace\":\"br.com.retailsales.commons.avro\",\"fields\":[{\"name\":\"productCode\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Product code.\"},{\"name\":\"productPrice\",\"type\":\"double\",\"doc\":\"Product price.\"},{\"name\":\"productAmount\",\"type\":\"int\",\"doc\":\"Product amount.\",\"default\":1}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<AvroProduct> ENCODER =
      new BinaryMessageEncoder<AvroProduct>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<AvroProduct> DECODER =
      new BinaryMessageDecoder<AvroProduct>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<AvroProduct> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<AvroProduct> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<AvroProduct>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this AvroProduct to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a AvroProduct from a ByteBuffer. */
  public static AvroProduct fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Product code. */
   private java.lang.String productCode;
  /** Product price. */
   private double productPrice;
  /** Product amount. */
   private int productAmount;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public AvroProduct() {}

  /**
   * All-args constructor.
   * @param productCode Product code.
   * @param productPrice Product price.
   * @param productAmount Product amount.
   */
  public AvroProduct(java.lang.String productCode, java.lang.Double productPrice, java.lang.Integer productAmount) {
    this.productCode = productCode;
    this.productPrice = productPrice;
    this.productAmount = productAmount;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return productCode;
    case 1: return productPrice;
    case 2: return productAmount;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: productCode = (java.lang.String)value$; break;
    case 1: productPrice = (java.lang.Double)value$; break;
    case 2: productAmount = (java.lang.Integer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'productCode' field.
   * @return Product code.
   */
  public java.lang.String getProductCode() {
    return productCode;
  }

  /**
   * Sets the value of the 'productCode' field.
   * Product code.
   * @param value the value to set.
   */
  public void setProductCode(java.lang.String value) {
    this.productCode = value;
  }

  /**
   * Gets the value of the 'productPrice' field.
   * @return Product price.
   */
  public java.lang.Double getProductPrice() {
    return productPrice;
  }

  /**
   * Sets the value of the 'productPrice' field.
   * Product price.
   * @param value the value to set.
   */
  public void setProductPrice(java.lang.Double value) {
    this.productPrice = value;
  }

  /**
   * Gets the value of the 'productAmount' field.
   * @return Product amount.
   */
  public java.lang.Integer getProductAmount() {
    return productAmount;
  }

  /**
   * Sets the value of the 'productAmount' field.
   * Product amount.
   * @param value the value to set.
   */
  public void setProductAmount(java.lang.Integer value) {
    this.productAmount = value;
  }

  /**
   * Creates a new AvroProduct RecordBuilder.
   * @return A new AvroProduct RecordBuilder
   */
  public static br.com.retailsales.commons.avro.AvroProduct.Builder newBuilder() {
    return new br.com.retailsales.commons.avro.AvroProduct.Builder();
  }

  /**
   * Creates a new AvroProduct RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new AvroProduct RecordBuilder
   */
  public static br.com.retailsales.commons.avro.AvroProduct.Builder newBuilder(br.com.retailsales.commons.avro.AvroProduct.Builder other) {
    return new br.com.retailsales.commons.avro.AvroProduct.Builder(other);
  }

  /**
   * Creates a new AvroProduct RecordBuilder by copying an existing AvroProduct instance.
   * @param other The existing instance to copy.
   * @return A new AvroProduct RecordBuilder
   */
  public static br.com.retailsales.commons.avro.AvroProduct.Builder newBuilder(br.com.retailsales.commons.avro.AvroProduct other) {
    return new br.com.retailsales.commons.avro.AvroProduct.Builder(other);
  }

  /**
   * RecordBuilder for AvroProduct instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<AvroProduct>
    implements org.apache.avro.data.RecordBuilder<AvroProduct> {

    /** Product code. */
    private java.lang.String productCode;
    /** Product price. */
    private double productPrice;
    /** Product amount. */
    private int productAmount;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(br.com.retailsales.commons.avro.AvroProduct.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.productCode)) {
        this.productCode = data().deepCopy(fields()[0].schema(), other.productCode);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.productPrice)) {
        this.productPrice = data().deepCopy(fields()[1].schema(), other.productPrice);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.productAmount)) {
        this.productAmount = data().deepCopy(fields()[2].schema(), other.productAmount);
        fieldSetFlags()[2] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing AvroProduct instance
     * @param other The existing instance to copy.
     */
    private Builder(br.com.retailsales.commons.avro.AvroProduct other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.productCode)) {
        this.productCode = data().deepCopy(fields()[0].schema(), other.productCode);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.productPrice)) {
        this.productPrice = data().deepCopy(fields()[1].schema(), other.productPrice);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.productAmount)) {
        this.productAmount = data().deepCopy(fields()[2].schema(), other.productAmount);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'productCode' field.
      * Product code.
      * @return The value.
      */
    public java.lang.String getProductCode() {
      return productCode;
    }

    /**
      * Sets the value of the 'productCode' field.
      * Product code.
      * @param value The value of 'productCode'.
      * @return This builder.
      */
    public br.com.retailsales.commons.avro.AvroProduct.Builder setProductCode(java.lang.String value) {
      validate(fields()[0], value);
      this.productCode = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'productCode' field has been set.
      * Product code.
      * @return True if the 'productCode' field has been set, false otherwise.
      */
    public boolean hasProductCode() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'productCode' field.
      * Product code.
      * @return This builder.
      */
    public br.com.retailsales.commons.avro.AvroProduct.Builder clearProductCode() {
      productCode = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'productPrice' field.
      * Product price.
      * @return The value.
      */
    public java.lang.Double getProductPrice() {
      return productPrice;
    }

    /**
      * Sets the value of the 'productPrice' field.
      * Product price.
      * @param value The value of 'productPrice'.
      * @return This builder.
      */
    public br.com.retailsales.commons.avro.AvroProduct.Builder setProductPrice(double value) {
      validate(fields()[1], value);
      this.productPrice = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'productPrice' field has been set.
      * Product price.
      * @return True if the 'productPrice' field has been set, false otherwise.
      */
    public boolean hasProductPrice() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'productPrice' field.
      * Product price.
      * @return This builder.
      */
    public br.com.retailsales.commons.avro.AvroProduct.Builder clearProductPrice() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'productAmount' field.
      * Product amount.
      * @return The value.
      */
    public java.lang.Integer getProductAmount() {
      return productAmount;
    }

    /**
      * Sets the value of the 'productAmount' field.
      * Product amount.
      * @param value The value of 'productAmount'.
      * @return This builder.
      */
    public br.com.retailsales.commons.avro.AvroProduct.Builder setProductAmount(int value) {
      validate(fields()[2], value);
      this.productAmount = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'productAmount' field has been set.
      * Product amount.
      * @return True if the 'productAmount' field has been set, false otherwise.
      */
    public boolean hasProductAmount() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'productAmount' field.
      * Product amount.
      * @return This builder.
      */
    public br.com.retailsales.commons.avro.AvroProduct.Builder clearProductAmount() {
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public AvroProduct build() {
      try {
        AvroProduct record = new AvroProduct();
        record.productCode = fieldSetFlags()[0] ? this.productCode : (java.lang.String) defaultValue(fields()[0]);
        record.productPrice = fieldSetFlags()[1] ? this.productPrice : (java.lang.Double) defaultValue(fields()[1]);
        record.productAmount = fieldSetFlags()[2] ? this.productAmount : (java.lang.Integer) defaultValue(fields()[2]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<AvroProduct>
    WRITER$ = (org.apache.avro.io.DatumWriter<AvroProduct>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<AvroProduct>
    READER$ = (org.apache.avro.io.DatumReader<AvroProduct>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
